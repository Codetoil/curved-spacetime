import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.nio.file.Paths

plugins {
    id 'java'
    id 'maven-publish'
}

java {
    withSourcesJar()
}

group = "io.codetoil"
version = "0.1.0-SNAPSHOT"

configurations {
    dependencyScope("vulkanGLFWRenderModuleRuntimeOnly") {
        canBeConsumed = false
        canBeResolved = false
    }
}

dependencies {
    implementation project(":curved-spacetime-main-module")
    implementation "org.ow2.asm:asm:${asmVersion}"
    implementation "org.ow2.asm:asm-util:${asmVersion}"
    implementation "org.ow2.asm:asm-commons:${asmVersion}"
    implementation "org.ow2.asm:asm-analysis:${asmVersion}"
    implementation "org.ow2.asm:asm-tree:${asmVersion}"
    implementation("org.quiltmc:quilt-loader:${quiltLoaderVersion}") {
        exclude module: "annotations"
    }

    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation 'org.junit.platform:junit-platform-launcher'

    implementation "org.tinylog:tinylog-impl:${tinyLoggerVersion}"

    runtimeOnly project(":curved-spacetime-quilt-tweaker-agent")
    runtimeOnly "net.fabricmc:tiny-mappings-parser:${tinyMappingsParserVersion}"
    runtimeOnly "net.fabricmc:tiny-remapper:${tinyRemapperVersion}"
    runtimeOnly "net.fabricmc:access-widener:${accessWidenerVersion}"
    runtimeOnly("net.fabricmc:sponge-mixin:${spongeMixinVersion}") {
        exclude group: "com.google.code.gson"
        exclude group: "com.google.guava"
    }
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "com.google.guava:guava:${guavaVersion}"
    runtimeOnly "cpw.mods:modlauncher:${modLauncherVersion}"
    runtimeOnly("org.quiltmc:quilt-json5:${quiltJson5Version}") {
        exclude module: "annotations"
    }
    runtimeOnly("org.quiltmc:quilt-config:${quiltConfigVersion}") {
        exclude module: "annotations"
    }
    runtimeOnly "io.github.llamalad7:mixinextras-fabric:${mixinExtrasVersion}"

    runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}"
    runtimeOnly "org.lwjgl:lwjgl:${lwjglVersion}:${getLWJGLNativesName()}"
    runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}"
    runtimeOnly "org.lwjgl:lwjgl-glfw:${lwjglVersion}:${getLWJGLNativesName()}"
    runtimeOnly "org.lwjgl:lwjgl-vulkan:${lwjglVersion}"
    if (DefaultNativePlatform.currentOperatingSystem.macOsX) {
        runtimeOnly "org.lwjgl:lwjgl-vulkan:${lwjglVersion}:${getLWJGLNativesName()}"
    }

    vulkanGLFWRenderModuleRuntimeOnly project(":curved-spacetime-vulkan-module")
    vulkanGLFWRenderModuleRuntimeOnly project(":curved-spacetime-glfw-render-module")
    vulkanGLFWRenderModuleRuntimeOnly project(":curved-spacetime-vulkan-glfw-render-module")
}

configurations {
    // declare a resolvable configuration that is going to resolve the runtime classpath of the application
    resolvable("runtimeClasspathWithVulkanGLFWRenderModule") {
        canBeConsumed = false
        canBeDeclared = false
        extendsFrom(implementation, vulkanGLFWRenderModuleRuntimeOnly)
    }
}

Set<Task> initQuiltTweakerAgent = project(":curved-spacetime-quilt-tweaker-agent").getTasksByName("jar", false)

tasks.named('test') {
    useJUnitPlatform()
    dependsOn(initQuiltTweakerAgent)
}

test {
    jvmArgs '-javaagent:../curved-spacetime-quilt-tweaker-agent/build/libs/curved-spacetime-quilt-tweaker-agent-0.1.0-SNAPSHOT.jar'
    setWorkingDir(Paths.get(getWorkingDir().parent, "test").toFile().exists() ?
            Paths.get(getWorkingDir().parent, "test").toFile() :
            Paths.get(getWorkingDir().parent, "test").toFile().mkdirs() ?
                    Paths.get(getWorkingDir().parent, "test").toFile() : null)
}

tasks.register('runTrivial', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'io.codetoil.curved_spacetime.loader.KnotCurvedSpacetime'
    jvmArgs = ['-Dloader.gameJarPath=../curved-spacetime-main-module/build/libs/curved-spacetime-main-module-0.1.0-SNAPSHOT.jar',
               '-Dloader.development=true',
               '-javaagent:../curved-spacetime-quilt-tweaker-agent/build/libs/curved-spacetime-quilt-tweaker-agent-0.1.0-SNAPSHOT.jar',
               '-Dfile.encoding=UTF-8',
               '-Dsun.stdout.encoding=UTF-8',
               '-Dsun.stderr.encoding=UTF-8']
    setWorkingDir(Paths.get(getWorkingDir().parent, "runTrivial").toFile().exists() ?
            Paths.get(getWorkingDir().parent, "runTrivial").toFile() :
            Paths.get(getWorkingDir().parent, "runTrivial").toFile().mkdirs() ?
                    Paths.get(getWorkingDir().parent, "runTrivial").toFile() : null)
    dependsOn(initQuiltTweakerAgent)
}

tasks.register('runTrivialWithVulkanGLFW', JavaExec) {
    classpath = configurations.runtimeClasspathWithVulkanGLFWRenderModule + sourceSets.main.runtimeClasspath

    mainClass = 'io.codetoil.curved_spacetime.loader.KnotCurvedSpacetime'
    jvmArgs = ['-Dloader.gameJarPath=../curved-spacetime-main-module/build/libs/curved-spacetime-main-module-0.1.0-SNAPSHOT.jar',
               '-Dloader.development=true',
               '-javaagent:../curved-spacetime-quilt-tweaker-agent/build/libs/curved-spacetime-quilt-tweaker-agent-0.1.0-SNAPSHOT.jar',
               '-Dfile.encoding=UTF-8',
               '-Dsun.stdout.encoding=UTF-8',
               '-Dsun.stderr.encoding=UTF-8']

    setWorkingDir(Paths.get(getWorkingDir().parent, "runTrivialWithVulkanGLFW").toFile().exists() ?
            Paths.get(getWorkingDir().parent, "runTrivialWithVulkanGLFW").toFile() :
            Paths.get(getWorkingDir().parent, "runTrivialWithVulkanGLFW").toFile().mkdirs() ?
                    Paths.get(getWorkingDir().parent, "runTrivialWithVulkanGLFW").toFile() : null)
    dependsOn(initQuiltTweakerAgent)
}


jar {
    manifest {
        attributes(
                'Main-Class': 'io.github.codetoil.curved_spacetime.loader.KnotCurvedSpacetime'
        )
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Codetoil/curved-spacetime")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            pom {
                packaging = 'jar'

                name = 'Curved Spacetime Loader Module'
                url = 'https://codetoil.io/curved-spacetime'
                inceptionYear = '2023'
                licenses {
                    license {
                        name = 'GPL-3.0-or-later'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'codetoil'
                        name = 'Anthony Michalek (Codetoil)'
                        email = 'ianthisawesomee@gmail.com'
                        url = 'https://codetoil.io'
                        roles = ['owner', 'arcitect', 'developer']
                    }
                }
                issueManagement {
                    system = "GitHub Issues"
                    url = "https://github.com/Codetoil/curved-spacetime/issues"
                }
                ciManagement {
                    system = "GitHub Actions"
                    url = "https://github.com/Codetoil/curved-spacetime/actions"
                }
                scm {
                    connection = 'scm:git:git://github.com/Codetoil/curved-spacetime.git'
                    developerConnection = 'scm:git:ssh://github.com/Codetoil/curved-spacetime.git'
                    url = 'https://github.com/Codetoil/curved-spacetime'
                }
            }
            components.forEach(softwareComponent -> from(softwareComponent))
        }
    }
}